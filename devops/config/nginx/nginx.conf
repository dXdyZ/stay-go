user nginx; # Пользовать от которого работает nginx
worker_processes auto; # Автоматически определять количество рабочих процесов (по числу ядер проца)

events {
    worker_connections 1024; # Максимальное кол-во соединений на один work-процесс
    use epoll; # Использовать эффективный метод обработки соединений для Linux
    multi_accept on; # Принимать несколько новых соединений за раз
}

http {
    #MIME-типы для статистики
    include /etc/nginx/mime.types; # Подключение файлов с MIME-типами файлов
    default_type application/octet-stream; # Тип по умолчанию для неизвестных файлов
    server_tokens off; # Скрыть версию nginx в заголовках

    # Формат логов
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                  '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main; # Путь для лового доступа

    error_log /var/log/nginx/error.log warn;

    # Оптимизации производительности
    sendfile on; # Использовать эффективный метод sendfile() для статических файлов
    tcp_nodelay on; # Включает алгоритм Нейгла
    keepalive_timeout 65;  # Таймаут keep-alive соединений
    types_hash_max_size 2048;  # Максимальный размер хэша для MIME-типов
    reset_timedout_connection on;

    #Сервер для обработки запросов
    server {
        listen 80; #Слушаем порт 80
        server_name localhost; #Имя сервера можно заменить на домен


        location /api/auth/ {
            proxy_pass http://auth-service:9191/auth-service/api/auth/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /api/auth/users/ {
            auth_request /_jwt_verify;

            auth_request_set $username $upstream_http_x_user_username;
            auth_request_set $user_roles $upstream_http_x_user_roles;

            proxy_set_header X-User-Username $username;
            proxy_set_header X-User-Roles $user_roles;

            proxy_pass http://auth-service:9191/auth-service/api/auth/users/;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /api/bookings/ {

            # Включаем проверку JWT токена
            auth_request /_jwt_verify;

            # Извлекаем данные из ответа auth-service
            auth_request_set $username $upstream_http_x_user_username;
            auth_request_set $user_roles $upstream_http_x_user_roles;

            # Передаем данные в заголовках в booking-service
            proxy_set_header X-User-Username $username;
            proxy_set_header X-User-Roles $user_roles;

            proxy_pass http://booking-service:9393/booking-service/api/bookings/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /api/hotels/ {
            proxy_pass http://booking-service:9393/booking-service/api/hotels/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /api/users/ {
            proxy_pass http://user-service:9292/user-service/api/user-service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Отдача статики
        location /uploads/ {
            alias /home/user/photo/;

            # Оптимизации производительности
            sendfile on;
            tcp_nopush on;
            tcp_nodelay on;

            # Кеширование в браузере
            expires 10d;
            add_header Cache-Control "public, no-transform";
        }

        # Поинт для проверки токено
        location = /_jwt_verify {

            internal; # Только для внутренних запросов
            proxy_pass http://auth-service:9191/auth-service/api/auth/verify/;

            # Передаем только заголовки
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";

            # Передаем оригинальные заголовки
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header Authorization $http_authorization;

            # Игнорирование ненужных заголовков
            proxy_hide_header "Content-Type";
        }

        error_page 401 @unauthorized;
        error_page 403 @forbidden;

        location @unauthorized {
            default_type application/json;
            return 401 '{"timestamp": "$time_iso8601", "message": {"message": "Unauthorized"}, "code": 401}';
        }

        location @forbidden {
            default_type application/json;
            return 403 '{"timestamp": "$time_iso8601", "message": {"message": "Forbidden"}, "code": 403}';
        }
    }
}